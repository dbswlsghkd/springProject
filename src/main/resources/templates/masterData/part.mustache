{{>layouts/header}}
<div class="input-group ms-auto">
<button type="button"
        class="btn btn-sm btn-outline-dark"
        data-bs-toggle="modal"
        data-bs-target="#comment-create-modal"
        >등록</button>
</div>
<div class="input-group mb-3 w-25 ms-auto">
    <input id="searchInput" type="text" class="form-control" placeholder="품번, 품명, 규격" aria-label="Recipient's username" aria-describedby="basic-addon2">
    <button class="btn btn-outline-secondary" type="button" id="button-addon2">
        <i class="bi bi-search"></i>
    </button>
</div>
<table class="table table-striped table-sm">
    <thead class="table-dark">
    <tr>
        <th scope="col" style="width:150px; text-align:center;">품번</th>
        <th scope="col" style="width:150px; text-align:center;">품명</th>
        <th scope="col" style="width:150px; text-align:center;">규격</th>
    </tr>
    </thead>
    <tbody id="partTableBody">
    {{#part}}
        <tr>
            <th>{{part_code}}</th>
            <td>{{part_name}}</td>
            <td>{{part_std}}</td>
        </tr>
    {{/part}}
    </tbody>
</table>

<!-- Pagination (페이징 UI) -->
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center" id="pagination">
        <li class="page-item" id="prevPage">
            <a class="page-link" href="#" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <!-- 페이지 버튼은 JavaScript로 동적으로 생성 -->
        <li class="page-item" id="nextPage">
            <a class="page-link" href="#" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>
<!-- 수정 링크 추가 -->
<!--<a href="/articles/{{!article.id}}/edit" class="btn btn-primary">Edit</a>-->
<!-- 삭제 링크 추가 -->
<!--<a href="/articles/{{!article.id}}/delete" class="btn btn-danger">Delete</a>-->


<!--댓글 뷰 페이지 삽입-->
{{!>comments/_comments}}

<!-- Modal -->
<div class="modal fade" id="comment-create-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">품번 등록</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- 댓글 수정 폼-->
                <form>
                    <!-- 품번 입력 -->
                    <div class="mb-3">
                        <label class="form-label">품번</label>
                        <input type="text" class="form-control form-control-sm" id="create-comment-partcode">
                    </div>
                    <!-- 품명 입력 -->
                    <div class="mb-3">
                        <label class="form-label">품명</label>
                        <input type="text" class="form-control form-control-sm" id="create-comment-partname">
                    </div>
                    <!-- 규격 입력 -->
                    <div class="mb-3">
                        <label class="form-label">규격</label>
                        <input type="text" class="form-control form-control-sm" id="create-comment-partstd">
                    </div>
                    <!-- 히든 인풋 -->
                    <input type="hidden" id="edit-comment-id">
                    <input type="hidden" id="edit-comment-article-id">
                    <!-- 전송 버튼 -->
                    <button type="button" class="btn btn-outline-dark btn-sm" id="comment-create-btn">등록 완료</button>
                </form>
            </div>
        </div>
    </div>
</div>

{{>layouts/footer}}

<script>

    // 페이지 당 항목 수와 현재 페이지 상태
    let currentPage = 0; // 0부터 시작
    const itemsPerPage = 15;

    // 초기 데이터 로드
    document.addEventListener("DOMContentLoaded", function() {
        fetchParts('', currentPage); // 빈 검색어로 데이터 불러오기
    });

    // 검색 버튼 클릭 이벤트
    document.getElementById('button-addon2').addEventListener('click', function () {
        const searchTerm = document.getElementById('searchInput').value;
        fetchParts(searchTerm, currentPage); // 현재 페이지에 맞는 데이터를 불러옴
    });

    // API 요청 및 테이블 업데이트 함수
    function fetchParts(searchTerm, page) {
        fetch(`/api/parts?search=${encodeURIComponent(searchTerm)}&page=${page}&size=${itemsPerPage}`)
                .then(response => response.json())
                .then(data => {
                    const tbody = document.getElementById('partTableBody');
                    tbody.innerHTML = ''; // 기존 데이터를 초기화

                    // 받아온 데이터로 테이블 업데이트
                    data.content.forEach(part => {
                        const row = `
                    <tr>
                        <th>${part.part_code}</th>
                        <td>${part.part_name}</td>
                        <td>${part.part_std}</td>
                    </tr>
                `;
                        tbody.innerHTML += row;
                    });

                    console.log(data.totalPages);
                    // 페이징 업데이트
                    updatePagination(data.totalPages);
                })
                .catch(error => {
                    console.error('Error fetching parts:', error);
                });
    }

    // 페이징 버튼 업데이트 함수
    function updatePagination(totalPages) {
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = ''; // 기존 페이징 버튼 초기화

        const startPage = Math.max(0, currentPage - 4); // 현재 페이지에서 4개 이전부터 시작
        const endPage = Math.min(totalPages - 1, startPage + 9); // 최대 10개 페이지 버튼 표시

        const prevPageElement = document.getElementById('prevPage');
        const nextPageElement = document.getElementById('nextPage');

        // Prev 버튼 상태 업데이트
        if (prevPageElement) {
            // prevPageElement.style.display = currentPage > 0 ? '' : 'visible';
            prevPageElement.style.display = ''; // 항상 보여주기
        }

        // Next 버튼 상태 업데이트
        if (nextPageElement) {
            // nextPageElement.style.display = currentPage < totalPages - 1 ? '' : 'visible';
            nextPageElement.style.display = ''; // 항상 보여주기
        }

        // 페이지 버튼 생성
        for (let i = startPage; i <= endPage; i++) {
            const pageItem = document.createElement('li');
            pageItem.classList.add('page-item');
            if (i === currentPage) {
                pageItem.classList.add('active');
            }

            const pageLink = document.createElement('a');
            pageLink.classList.add('page-link');
            pageLink.innerText = i + 1; // 페이지 번호 표시 (1부터 시작)
            pageLink.href = '#';
            pageLink.addEventListener('click', function (event) {
                event.preventDefault();
                currentPage = i;
                const searchTerm = document.getElementById('searchInput').value;
                fetchParts(searchTerm, currentPage); // 선택한 페이지의 데이터를 불러옴
            });

            pageItem.appendChild(pageLink);
            pagination.appendChild(pageItem);
        }
    }

    // Prev 버튼 클릭 이벤트
    document.getElementById('prevPage').addEventListener('click', function (event) {
        event.preventDefault();
        if (currentPage > 0) {
            currentPage--;
            const searchTerm = document.getElementById('searchInput').value;
            fetchParts(searchTerm, currentPage);
        }
    });

    // Next 버튼 클릭 이벤트
    document.getElementById('nextPage').addEventListener('click', function (event) {
        event.preventDefault();
        currentPage++;
        const searchTerm = document.getElementById('searchInput').value;
        fetchParts(searchTerm, currentPage);
    });

    {
        // 모달 요소 선택
        const commentEditModal = document.querySelector("#comment-create-modal");
        // 모달 이벤트 감지
        commentEditModal.addEventListener("show.bs.modal", function(event) {
            // 트리거 버튼 선택
            const triggerBtn = event.relatedTarget;
            // 데이터 가져오기
            const id = triggerBtn.getAttribute("data-bs-id");
            const nickname = triggerBtn.getAttribute("data-bs-nickname");
            const body = triggerBtn.getAttribute("data-bs-body");
            const articleId = triggerBtn.getAttribute("data-bs-article-id");
            //console.log(`${id}, ${nickname}, ${body}, ${articleId}`);
            // 데이터를 반영
            document.querySelector("#edit-comment-nickname").value = nickname;
            document.querySelector("#edit-comment-body").value = body;
            document.querySelector("#edit-comment-id").value = id;
            document.querySelector("#edit-comment-article-id").value = articleId;
        });
    }

    {
        // 품번 생성 버튼 변수화
        const commentCreateBtn = document.querySelector("#comment-create-btn");
        // 댓글 클릭 이벤트 감지!
        commentCreateBtn.addEventListener("click", function() {
            // 새 댓글 객체 생성
            const part = {
                part_code: document.querySelector("#create-comment-partcode").value,
                part_name: document.querySelector("#create-comment-partname").value,
                part_std: document.querySelector("#create-comment-partstd").value
            };
            // 댓글 객체 출력
            console.log(part);
            // fetch() - 비동기 통신을 위한 API
            const url = "/api/part/create";
            fetch(url, {
                method: "post",
                body: JSON.stringify(part),
                headers: {
                    "Content-Type": "application/json"
                }
            }).then(res => {
                // http 응답 코드에 따른 메시지 출력
                if (res.ok) {
                    location.href = "/parts";
                } else {
                    alert("품번 등록 실패하였습니다.!");
                }
            }).catch(error => {
                console.error("Error occurred:", error);
            });
        });
    }

</script>