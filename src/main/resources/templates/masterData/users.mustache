{{>layouts/header}}
<!--<div class="input-group ms-auto">-->
<!--    <button type="button"-->
<!--            class="btn btn-sm btn-outline-dark"-->
<!--            data-bs-toggle="modal"-->
<!--            data-bs-target="#comment-create-modal"-->
<!--    >등록</button>-->
<!--</div>-->
<div class="input-group mb-3 w-25 ms-auto">
    <input id="searchInput" type="text" class="form-control" placeholder="사용자 ID, 사용자 이름, ROLE" aria-label="Recipient's username" aria-describedby="basic-addon2">
    <button class="btn btn-outline-secondary" type="button" id="button-addon2">
        <i class="bi bi-search"></i>
    </button>
</div>
<table class="table table-striped table-sm table-hover">
    <thead class="table-dark">
    <tr>
        <th scope="col" style="width:150px; text-align:center;">사용자 ID</th>
        <th scope="col" style="width:150px; text-align:center;">사용자 이름</th>
        <th scope="col" style="width:150px; text-align:center;">ROLE</th>
    </tr>
    </thead>
    <tbody id="usersTableBody">
    {{#users}}
        <tr data-bs-toggle="modal" data-bs-target="#users-update-modal" data-userid="{{userid}}" data-name="{{name}}" data-role="{{role}}">
            <th>{{userid}}</th>
            <td>{{name}}</td>
            <td>{{role}}</td>
        </tr>
    {{/users}}
    </tbody>
</table>

<!-- Pagination (페이징 UI) -->
<nav aria-label="Page navigation">
    <ul class="pagination justify-content-center" id="pagination">
        <li class="page-item" id="prevPage">
            <a class="page-link" href="#" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        <!-- 페이지 버튼은 JavaScript로 동적으로 생성 -->
        <li class="page-item" id="nextPage">
            <a class="page-link" href="#" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>
<!-- 수정 링크 추가 -->
<!--<a href="/articles/{{!article.id}}/edit" class="btn btn-primary">Edit</a>-->
<!-- 삭제 링크 추가 -->
<!--<a href="/articles/{{!article.id}}/delete" class="btn btn-danger">Delete</a>-->


<!--댓글 뷰 페이지 삽입-->
{{!>comments/_comments}}

{{>layouts/footer}}

<script>

    // 페이지 당 항목 수와 현재 페이지 상태
    let currentPage = 0; // 0부터 시작
    const itemsPerPage = 15;

    // 초기 데이터 로드
    document.addEventListener("DOMContentLoaded", function() {
        fetchPartners('', currentPage); // 빈 검색어로 데이터 불러오기
    });

    // 검색 버튼 클릭 이벤트
    document.getElementById('button-addon2').addEventListener('click', function () {
        const searchTerm = document.getElementById('searchInput').value;
        fetchPartners(searchTerm, currentPage); // 현재 페이지에 맞는 데이터를 불러옴
    });

    // API 요청 및 테이블 업데이트 함수
    function fetchPartners(searchTerm, page) {
        fetch(`/api/users?search=${encodeURIComponent(searchTerm)}&page=${page}&size=${itemsPerPage}`)
                .then(response => response.json())
                .then(data => {
                    const tbody = document.getElementById('usersTableBody');
                    tbody.innerHTML = ''; // 기존 데이터를 초기화
                    // console.log(data);
                    // 받아온 데이터로 테이블 업데이트
                    data.content.forEach(users => {
                        const row = `
                    <tr data-bs-toggle="modal" data-bs-target="#users-update-modal" data-userid="${users.userid}" data-name="${users.name}" data-partneraddress="${users.role}">
                        <th>${users.userid}</th>
                        <td>${users.name}</td>
                        <td>${users.role}</td>
                    </tr>
                `;
                        tbody.innerHTML += row;
                    });

                    // console.log(data.totalPages);
                    // 페이징 업데이트
                    updatePagination(data.totalPages);
                })
                .catch(error => {
                    console.error('Error fetching partnerss:', error);
                });
    }

    // 페이징 버튼 업데이트 함수
    function updatePagination(totalPages) {
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = ''; // 기존 페이징 버튼 초기화

        const startPage = Math.max(0, currentPage - 4); // 현재 페이지에서 4개 이전부터 시작
        const endPage = Math.min(totalPages - 1, startPage + 9); // 최대 10개 페이지 버튼 표시

        const prevPageElement = document.getElementById('prevPage');
        const nextPageElement = document.getElementById('nextPage');

        // Prev 버튼 상태 업데이트
        if (prevPageElement) {
            // prevPageElement.style.display = currentPage > 0 ? '' : 'visible';
            prevPageElement.style.display = ''; // 항상 보여주기
        }

        // Next 버튼 상태 업데이트
        if (nextPageElement) {
            // nextPageElement.style.display = currentPage < totalPages - 1 ? '' : 'visible';
            nextPageElement.style.display = ''; // 항상 보여주기
        }

        // 페이지 버튼 생성
        for (let i = startPage; i <= endPage; i++) {
            const pageItem = document.createElement('li');
            pageItem.classList.add('page-item');
            if (i === currentPage) {
                pageItem.classList.add('active');
            }

            const pageLink = document.createElement('a');
            pageLink.classList.add('page-link');
            pageLink.innerText = i + 1; // 페이지 번호 표시 (1부터 시작)
            pageLink.href = '#';
            pageLink.addEventListener('click', function (event) {
                event.preventDefault();
                currentPage = i;
                const searchTerm = document.getElementById('searchInput').value;
                fetchPartners(searchTerm, currentPage); // 선택한 페이지의 데이터를 불러옴
            });

            pageItem.appendChild(pageLink);
            pagination.appendChild(pageItem);
        }
    }

    // Prev 버튼 클릭 이벤트
    document.getElementById('prevPage').addEventListener('click', function (event) {
        event.preventDefault();
        if (currentPage > 0) {
            currentPage--;
            const searchTerm = document.getElementById('searchInput').value;
            fetchPartners(searchTerm, currentPage);
        }
    });

    // Next 버튼 클릭 이벤트
    document.getElementById('nextPage').addEventListener('click', function (event) {
        event.preventDefault();
        currentPage++;
        const searchTerm = document.getElementById('searchInput').value;
        fetchPartners(searchTerm, currentPage);
    });


</script>